// Lark-compatible grammar for exercise constraint validation.

// The 'start' rule for the parser.
?start: constraint

// A constraint can be one or more clauses, joined by AND/OR.
constraint: (quantifier_clause | requirement_clause) (logical_operator (quantifier_clause | requirement_clause))*

// Clause Types
quantifier_clause: "FOR" quantifier target [exclusion] requirement_clause
requirement_clause: "REQUIRE" (predicate | count_expression)

// Grammar Building Blocks
predicate: path comparison_operator value
count_expression: "COUNT" "(" target ")" comparison_operator NUMBER
path: IDENTIFIER ("." IDENTIFIER | "[" NUMBER "]")*
value: IDENTIFIER | NUMBER
quantifier: "ALL" | "ANY" | "NONE"
target: ("shot" | "block" | "exercise") ["(" identifier_list ")"]
exclusion: "EXCLUDING" "(" identifier_list ")"
identifier_list: IDENTIFIER ("," IDENTIFIER)*

// Terminals (Tokens)
comparison_operator: "==" | "!=" | ">" | ">=" | "<" | "<="
logical_operator: "AND" | "OR"
IDENTIFIER: /[a-zA-Z_][a-zA-Z0-9_]*/
NUMBER: /[0-9]+/

// Import and ignore common whitespace
%import common.WS
%ignore WS